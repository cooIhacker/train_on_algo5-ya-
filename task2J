from collections import defaultdict
def parcer(sent):
    global f
    words=sent.split()
    if sent=='Score opens by "Hp eci dP QmHbgM xjIw"':
        pass
    match words[0]:
        case "Total":
            if words[-1][-1] == "\"":
                team=' '.join(words[3:])
                # print(team)
                print(Total_goals_for(team))
            else:
                player=' '.join(words[3:])
                # print(player)
                print(Total_goals_by(player))
        case "Goals":
            match words[2]:
                case 'minute':
                    T=int(words[3])
                    player=' '.join(words[5:])
                    print(Goals_on_minute(T,player))

                case 'first':
                    T = int(words[3])
                    player = ' '.join(words[6:])
                    print(Goals_on_first(T, player))

                case 'last':
                    T = int(words[3])
                    player = ' '.join(words[6:])
                    print(Goals_on_last(T, player))

        case "Mean":
            if words[-1][-1] == "\"":
                team = ' '.join(words[5:])
                # print(team)
                print(Mean_goals_per_game_for(team))
            else:
                player = ' '.join(words[5:])
                # print(player)
                print(Mean_goals_per_game_by(player))
        case "Score":
            object = ' '.join(words[3:])
            print(Score_opens_by(object))

        case _:
            g1,g2=map(int, words[-1].split(':'))
            # print(sent.split('\"'))
            team1,team2='\"'+sent.split('\"')[1]+'\"','\"'+sent.split('\"')[3]+'\"'
            if team1=='"Hp eci dP QmHbgM xjIw"' or team2=='"Hp eci dP QmHbgM xjIw"':
                c=openers["Hp eci dP QmHbgM xjIw"]
                pass
            if team1 not in goals_for_team:
                goals_for_team[team1]=[0,0]
            if team2 not in goals_for_team:
                goals_for_team[team2] = [0, 0]
            return match(team1,team2,g1,g2)

def match(team1,team2,g1,g2):
    global f,goals_for_team, goals_by_player, the_players_team, openers
    goals_for_team[team1][0]+=g1
    goals_for_team[team2][0]+=g2
    goals_for_team[team1][1]+=1
    goals_for_team[team2][1]+=1
    firstgoalmin1,firstgoalmin2=float('inf'),float('inf')
    firstgoalkiller1,firstgoalkiller2='',''
    for i in range(g1):
        goal = f.readline().rstrip()
        minute=goal.split()[-1]
        minute=int(minute[:-1])
        player=' '.join(goal.split()[:-1])
        the_players_team[player]=team1
        goals_by_player[player].append(minute)
        if i == 0:
            firstgoalkiller1=player
            firstgoalmin1 = minute
    for i in range(g2):
        goal = f.readline().rstrip()
        minute = goal.split()[-1]
        minute = int(minute[:-1])
        player = ' '.join(goal.split()[:-1])
        the_players_team[player] = team2
        goals_by_player[player].append(minute)
        if i == 0:
            firstgoalkiller2=player
            firstgoalmin2 = minute
    if firstgoalmin1<firstgoalmin2:
        openers[team1]+=1
        openers[firstgoalkiller1]+=1
    elif firstgoalmin2<float('inf'):
        openers[team2]+=1
        openers[firstgoalkiller2]+=1
    return 0

def Total_goals_for(team):
    global goals_for_team
    if team in goals_for_team:
        return goals_for_team[team][0]
    else:
        # print(0)
        return 0

def Total_goals_by(player):
    global goals_by_player
    return len(goals_by_player[player])

def Mean_goals_per_game_for(team):
    global goals_for_team
    return goals_for_team[team][0]/goals_for_team[team][1]

def Mean_goals_per_game_by(player):
    global goals_for_team, the_players_team
    team=the_players_team[player]
    return len(goals_by_player[player])/goals_for_team[team][1]

def Goals_on_minute(minute,player):
    global goals_by_player
    return goals_by_player[player].count(minute)

def Goals_on_first(T,player):
    global goals_by_player
    c=0
    for i in goals_by_player[player]:
        if i<=T: c+=1
    return c

def Goals_on_last(T,player):
    global goals_by_player
    c=0
    for i in goals_by_player[player]:
        if i>=91-T: c+=1
    return c

def Score_opens_by(object):
    global openers
    return openers[object]

goals_for_team=dict()
goals_by_player=defaultdict(list)
the_players_team=dict()
openers=defaultdict(int)


with open('10') as f:
    while line := f.readline():
        sent=line.rstrip()
        parcer(sent)
