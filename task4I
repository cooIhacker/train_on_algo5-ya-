import math
mxtime=0
d,n=map(int, input().split())
ballons=[]
for _ in range(n):
    x,y,v=map(int, input().split())
    ballons.append((x,y,v))
    mxtime=max(mxtime, 2*math.sqrt(x**2+(y+d)**2)/v)
eps=10**(-6)
ans=[0,0]

# print(mxtime)

def get_intersections(x0, y0, r0, x1, y1, r1):
    d = math.sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2)
    if d > r0 + r1:
        return None
    if d < abs(r0 - r1):
        return None
    if d == 0 and r0 == r1:
        return None
    else:
        a = (r0 ** 2 - r1 ** 2 + d ** 2) / (2 * d)
        h = math.sqrt(r0 ** 2 - a ** 2)
        x2 = x0 + a * (x1 - x0) / d
        y2 = y0 + a * (y1 - y0) / d
        x3 = x2 + h * (y1 - y0) / d
        y3 = y2 - h * (x1 - x0) / d
        x4 = x2 - h * (y1 - y0) / d
        y4 = y2 + h * (x1 - x0) / d
        return (x3, y3, x4, y4)

def point_not_in_cyrcle(x1,y1,t):
    global ans
    if x1**2+y1**2>d**2 or y1<0:
        return False
    for x,y,v in ballons:
        if (x1-x)**2+(y1-y)**2<(t*v)**2-eps:
            return False
    ans=[x1,y1]
    return True

def half_cyrcle_int(x1,y1,v1,t):
    if cortege:=get_intersections(x1,y1,v1*t,0,0,d):
        x3,y3,x4,y4=cortege
        if point_not_in_cyrcle(x3,y3,t) or point_not_in_cyrcle(x4,y4,t):
            return 'существует недостижимая точка'
    else:
        if x1**2+y1**2<(v1*t)**2 and v1*t>d:
            return 'все точки достижимы'
    return None

def line_int(x1,y1,v1,t):
    if y1**2>(v1*t)**2:
        return False
    else:
        x3,x4=x1-math.sqrt((v1*t)**2-y1**2),x1+math.sqrt((v1*t)**2-y1**2)
        if point_not_in_cyrcle(x3, 0, t) or point_not_in_cyrcle(x4, 0, t):
            return True
    return False

def bins():
    l,r=eps,mxtime
    while l+eps<r:
        m=(l+r)/2
        # print(l,r,m)
        if check(m):
            r=m
        else:
            l=m
    return l

def check(t):
    for x1,y1,v1 in ballons:
        if line_int(x1,y1,v1,t):
            return False
        if mes:=half_cyrcle_int(x1,y1,v1,t):
            if mes=='все точки достижимы':
                return True
            else:
                return False


    for x1,y1,v1 in ballons:
        for x2,y2,v2 in ballons:
            if x1!=x2 or y1!=y2:
                if cortege:=get_intersections(x1,y1,v1*t,x2,y2,v2*t):
                    x3, y3, x4, y4 = cortege
                    if point_not_in_cyrcle(x3,y3,t) or point_not_in_cyrcle(x4,y4,t):
                        return False

    if point_not_in_cyrcle(eps,eps,t):
        return False

    return True

print(bins())
print(*ans)
